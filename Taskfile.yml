version: 3

# Taskfile principal - T√¢ches globales et inclusions
# Charge automatiquement les variables depuis le fichier .env s'il existe
dotenv: [ '.env' ]

includes:
  docker: ./taskfiles/docker/Taskfile.yml
  utils: ./taskfiles/utils/Taskfile.yml
  env: ./taskfiles/env/Taskfile.yml
  nodejs: ./taskfiles/nodejs/Taskfile.yml
  download: ./taskfiles/download/Taskfile.yml

vars:
  # Variables avec valeurs par d√©faut depuis .env ou valeurs de fallback
  PROJECT_NAME: '{{.PROJECT_NAME | default "nuxtjs"}}'
  PROJECT_VERSION: '1.0.0'
  ENVIRONMENT: '{{.ENVIRONMENT | default "development"}}'
  STACK_NAME: '{{.STACK | default "nuxtjs"}}'
  SERVERNAME: '{{.SERVERNAME | default "nuxtjs.traefik.me"}}'
  DOCKERCOMPOSEFILE: '{{.DOCKERCOMPOSEFILE | default "docker-compose.yml"}}'

tasks:
  default:
    desc: "Affiche l'aide et les t√¢ches disponibles"
    silent: true
    cmds:
    - echo "üõ†Ô∏è  Collection de Taskfiles pour le d√©veloppement"
    - echo ""
    - echo "T√¢ches globales disponibles :"
    - task --list
    - echo ""

  info:
    desc: "Affiche les informations du projet avec les variables d'environnement"
    silent: true
    cmds:
    - |
      echo "üõ†Ô∏è  {{.PROJECT_NAME}} v{{.PROJECT_VERSION}} - Collection de Taskfiles"
      echo "Environnement: {{.ENVIRONMENT}}"

  help:
    desc: "Affiche l'aide d√©taill√©e"
    aliases: [ h ]
    silent: true
    cmds:
    - task: default

  nuxtjs:getpull-image:
    desc: "T√©l√©charge les images Docker d√©finies dans le docker-compose.yml"
    silent: true
    cmds:
    - task: docker:images:pull
      vars:
        COMPOSE_FILE: "{{.DOCKERCOMPOSEFILE}}"

  nuxtjs:deploy:
    desc: "D√©ploie les stacks Docker d√©finies dans les fichiers docker-compose"
    silent: true
    cmds:
    - task: docker:stack:deploy
      vars:
        COMPOSE_FILE: "{{.DOCKERCOMPOSEFILE}}"
        STACK_NAME: "{{.STACK_NAME}}"

  nuxtjs:waiting:
    desc: "Attend que les services soient op√©rationnels"
    silent: true
    cmds:
    - task: docker:stack:check:containers:ready
      vars:
        CONTAINERS: "www"
        STACK_NAME: "{{.STACK_NAME}}"

  nuxtjs:ls:
    desc: "Liste les stacks et services Docker"
    silent: true
    cmds:
    - task: docker:stack:services
      vars:
        STACK_NAME: "{{.STACK_NAME}}"

  create:apps:
    silent: true
    desc: "Cr√©e une nouvelle application nuxtjs dans le dossier apps"
    cmds:
    - rm -rf apps
    - NUXT_TELEMETRY_DISABLED=1 echo "y" | npx -y create-nuxt-app@latest apps --packageManager npm --language ts --ui none --features none --modules none --gitInit false --ci
    - |
      # Ajouter la configuration vite.server.allowedHosts dans nuxt.config.ts
      node -e "
      const fs = require('fs');
      const path = 'apps/nuxt.config.ts';
      let content = fs.readFileSync(path, 'utf8');

      // Si vite n'existe pas d√©j√†, l'ajouter
      if (!content.includes('vite:')) {
        // Trouver la position avant la fermeture finale
        content = content.replace(
          /(\s*}\)\s*$)/,
          ',\n  vite: {\n    server: {\n      allowedHosts: [\"{{.SERVERNAME}}\"]\n    }\n  }\n})'
        );
      }

      // S'assurer que le fichier se termine correctement
      if (!content.trim().endsWith('})')) {
        content = content.replace(/(\s*)$/, '\n})$1');
      }

      fs.writeFileSync(path, content);
      console.log('Configuration mise √† jour avec succ√®s');
      "

  nuxtjs:exec:
    desc: "Ex√©cute une commande dans un conteneur en cours d'ex√©cution"
    silent: true
    cmds:
    - task: nuxtjs:getpull-image
    - task: create:apps
    - task: nuxtjs:deploy
    - task: nuxtjs:waiting
    - task: nuxtjs:ls

  nuxtjs:bash:
    desc: "Ouvre un shell bash dans le conteneur www"
    silent: true
    cmds:
    - task: docker:stack:shell
      vars:
        STACK_NAME: "nuxtjs"
        SERVICE_NAME: "www"
